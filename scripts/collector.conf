# Akka version, checked against the runtime version of Akka. Loaded from generated conf file.
include "version"

akka {

  http {
    server {
      request-timeout = 60s
      remote-address-header = on
      default-host-header = ""
    }

    client {
      connecting-timeout = 60s
    }

    parsing {
      max-content-length = 1m
    }
  }

  # Home directory of Akka, modules in the deploy directory will be loaded
  home = ""

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs
  # to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  //  event-handlers = [“akka.event.slf4j.Slf4jEventHandler”]
  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = "DEBUG"

  //  # Log level for the very basic logger activated during ActorSystem startup.
  //  # This logger prints the log messages to stdout (System.out).
  //  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"
  //
  //  # Filter of log events that is used by the LoggingAdapter before
  //  # publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  //-- for DEBUG only
  //  actor {
  //    debug {
  //      receive = on
  //      autoreceive = on
  //      lifecycle = on
  //    }
  //  }
}

server-ip = "0.0.0.0"
server-port = 7000

collector {
  consumer {
    # collector_topic = wifi_analyzer
    collector_topic = "test-topic-collector"

    # collector_group = wifi_analyzer_grp
    collector_group = "test-group-collector-2"

    # collector_broker_info = localhost:9092
    collector_broker_info = "192.168.0.12:9092"

    # collector_cluster_info = localhost:2181
    collector_cluster_info = "192.168.0.12:2181"

    collector_lock_file = "/tmp/lock_collector"

    consumer_count = 20
  }

  producer {
    analyzer_topic = "test-topic-analyzer"

    # analyzer_broker_info = localhost:9092
    analyzer_broker_info = "192.168.0.12:9092"

    #-- all, 1, 0
    analyzer_acks = 1
  }

  redis_server = {
    redis_server_ip = "localhost"
  }
}

mysqlSlick {
  driver = "slick.driver.MySQLDriver$"
  //  dataSourceClass = "org.mariadb.jdbc.MySQLDataSource"
  dataSourceClass = "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
  properties = {
    url = "jdbc:mysql://61.84.12.26:3306/wifi_scanner?"
    serverName="61.84.12.26"
    databaseName = "wifi_scanner"
    user = "root"
    password = "uni123"
  }
  minConnections = 10
  maxConnections = 30
  numThreads = 20
}

mariaDB {
  driver = "slick.driver.MySQLDriver$"
  dataSourceClass = "org.mariadb.jdbc.MySQLDataSource"
  db = {
    dataSourceClass = "org.mariadb.jdbc.MySQLDataSource"
    url = "jdbc:mariadb://192.168.0.12:3306/metro_istanbul"
    serverName="192.168.0.12"
    databaseName = "metro_istanbul"
    user = "root"
    password = "uni*2017"
    useServerPrepStmts="true"
    useFractionalSeconds="true"
  }
  minConnections = 10
  maxConnections = 30
  numThreads = 20
}

//mysqlSlick {
//  driver = "slick.driver.MySQLDriver$"
////  dataSourceClass = "com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
//  dataSourceClass = "org.mariadb.jdbc.MySQLDataSource"
//  properties = {
//    url = "jdbc:mysql://61.84.12.9:3306/wifi_scanner"
//    serverName="61.84.12.9"
//    databaseName = "wifi_scanner"
//    user = "root"
//    password = "5fgp3h84"
//  }
//  minConnections = 10
//  maxConnections = 20
//  numThreads = 20
//}

//mysql = {
//  dataSourceClass="com.mysql.jdbc.jdbc2.optional.MysqlDataSource"
//  properties {
//    user="root"
//    password="root"
//    databaseName="bank_db"
//    serverName="localhost"
//  }
//  numThreads=10
//}

//mariadb {
//  driver = "slick.driver.MySQLDriver$"
//
//  db {
//    url = "jdbc:mysql://localhost:3306/test?user=root&password=password"
//    driver = com.mysql.jdbc.Driver
//    maxThreads = 10
//  }
//}